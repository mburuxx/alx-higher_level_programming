The `base_geometry` class module
================================

First import the module.
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

SUCCESS CASES
-------------
Trying to use the name as string and value as integer:
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)
	

FAIL CASES
----------
Trying to use both values as strings:
	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	  ...
	TypeError: name must be an integer

Trying to use a value that is equal to 0:
	>>> bg.integer_validator("name", 0)
	Traceback (most recent call last):
	  ...
	ValueError: name must be greater than 0

Trying to use a value that is less than 0:
	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	  ...
	ValueError: distance must be greater than 0

Trying to access the area method in the class:
	>>> bg.area()
	Traceback (most recent call last):
	  ...
	Exception: area() is not implemented

Trying to use only name:
	>>> bg.integer_validator("age")
	Traceback (most recent call last):
	  ...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Trying to use value as set:
	>>> bg.integer_validator("age", (4,))
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

Trying to use value as a list:
	>>> bg.integer_validator("age", [3])
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

Trying to use value as a boolean:
	>>> bg.integer_validator("age", True)
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

Trying to use value as a dictionary:
	>>> bg.integer_validator("age", {3,4})
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

Trying to assign None to value:
	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer
